{"version":3,"sources":["img/restorelogo.png","components/global/navigation/NavigationBar.js","components/admin/AdminArea.js","components/servers/Server.js","components/global/LoggedOut.js","components/servers/ServerSelection.js","components/servers/ManageServer.js","components/user/RestoreView.js","components/servers/PremiumActivation.js","components/information/Information.js","components/footer/Footer.js","components/App.js","reportWebVitals.js","index.js"],"names":["NavigationBar","Fragment","Navbar","collapseOnSelect","expand","bg","variant","Brand","as","Link","to","src","logo","alt","className","width","height","Toggle","aria-controls","Collapse","id","Nav","icon","faInfoCircle","this","props","user","faServer","admin","faUser","href","process","faSignOutAlt","username","discriminator","faSignInAlt","Component","AdminArea","state","error","success","newKeys","loading","premiumAddUser","stressTestGuild","data","keysToGenerate","keyToRevoke","disabled","visibleUsers","setState","fetch","credentials","then","res","json","response","catch","loadData","headers","method","body","JSON","stringify","oldId","newId","concat","event","target","value","Alert","map","key","Card","Header","Body","guildCount","userCount","Form","Control","placeholder","onChange","handleInput","bind","type","Button","onClick","stressTest","block","generateKey","revokeKey","purgeKeys","addPremiumUser","revokePremium","Table","borderless","hover","premiumUsers","slice","tag","length","loadMore","migrations","migration","oldTag","newTag","approveMigration","includes","size","denyMigration","Server","Col","guild","name","Image","Footer","LoggedOut","window","location","replace","ServerSelection","migrate","guilds","filter","g","owner","Row","lg","md","sm","xs","ManageServer","prefix","verifiedRole","logsChannel","welcomeMessage","warning","pullDisabled","restoreDisabled","allowAdmin","pullSuccess","pullError","updateSettings","pullUser","match","params","options","selectedIndex","userId","open","encodeURIComponent","memberCount","roundedCircle","Check","handleCheckbox","label","checked","custom","Label","Text","handleSelect","roles","role","selected","channels","channel","backupServer","restoreServer","pullUsers","linkedUsers","inServer","RestoreView","redirectUri","saveData","setTimeout","avatar","linked","register","unlink","PremiumActivation","reload","activatePremium","data-sellix-product","Information","premium","modalActive","Modal","show","onHide","modalStatus","App","Container","exact","path","render","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4b01f5d9.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/restorelogo.8f0c5e8d.png\";","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Navbar, Nav } from \"react-bootstrap\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faServer, faSignOutAlt, faSignInAlt, faUser, faInfoCircle } from \"@fortawesome/free-solid-svg-icons\";\nimport logo from \"../../../img/restorelogo.png\";\n\nexport default class NavigationBar extends Component {\n    render() {\n        return(\n            <React.Fragment>\n                <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\n                    <Navbar.Brand as={Link} to=\"/\">\n                    <img src={logo} alt=\"Logo of RestoreBot\" className=\"d-inline-block align-top\" width={\"30px\"} height={\"30px\"} />\n                    </Navbar.Brand>\n                    <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n                    <Navbar.Collapse id=\"responsive-navbar-nav\">\n                        <Nav className=\"mr-auto\">\n                            <Nav.Link as={Link} to=\"/\"><FontAwesomeIcon icon={faInfoCircle} /> Information</Nav.Link>\n                            {this.props.user &&\n                                <Nav.Link as={Link} to=\"/servers\"><FontAwesomeIcon icon={faServer} /> Server Selection</Nav.Link>\n                            }\n                            {this.props.user && this.props.user.admin &&\n                                <Nav.Link as={Link} to=\"/admin\"><FontAwesomeIcon icon={faUser} /> Admin</Nav.Link>\n                            }\n                        </Nav>\n                        <Nav>\n                            {this.props.user &&\n                                <Nav.Link href={`${process.env.REACT_APP_API}/oauth/logout`}>\n                                    <FontAwesomeIcon icon={faSignOutAlt} /> \n                                    {` Logout (${this.props.user.username}#${this.props.user.discriminator})`}\n                                </Nav.Link>\n                            }\n                            {!this.props.user &&\n                                <Nav.Link href={`${process.env.REACT_APP_API}/oauth/login`}>\n                                    <FontAwesomeIcon icon={faSignInAlt} /> \n                                    {\" Login with Discord\"}\n                                </Nav.Link>\n                            }\n                        </Nav>\n                    </Navbar.Collapse>\n                </Navbar>\n            </React.Fragment>\n        );\n    }\n}","import React, { Component } from \"react\";\nimport { Alert, Card, Button, Form, Table } from \"react-bootstrap\";\nimport fetch from \"node-fetch\";\n\nexport default class AdminArea extends Component {\n    state = {\n        error: null,\n        success: null,\n        newKeys: null,\n        loading: true,\n        user: null,\n        premiumAddUser: null,\n        stressTestGuild: null,\n        data: null,\n        keysToGenerate: \"1\",\n        keyToRevoke: null,\n        disabled: [],\n        visibleUsers: 10\n    }\n\n    loadMore() {\n        this.setState({ visibleUsers: this.state.visibleUsers + 10 });\n    }\n\n    loadData() {\n        fetch(`${process.env.REACT_APP_API}/admin/load`, {\n            credentials: \"include\"\n        })\n        .then(res => res.json())\n        .then(res => {\n            if (res.error) return this.setState({\n                loading: true,\n                data: null\n            });\n\n            return this.setState({\n                loading: false,\n                data: res.response\n            });\n        })\n        .catch(() => {\n            this.setState({\n                loading: true,\n                data: null\n            });\n        });\n    }\n\n    componentDidMount() {\n        this.loadData();\n    }\n\n    generateKey() {\n        fetch(`${process.env.REACT_APP_API}/admin/generate-premium-key`, {\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            credentials: \"include\",\n            method: \"POST\",\n            body: JSON.stringify({\n                keysToGenerate: this.state.keysToGenerate\n            })\n        })\n        .then(res => res.json())\n        .then(res => {\n            if (res.error) return this.setState({\n                error: res.response,\n                newKeys: null\n            });\n\n            return this.setState({\n                newKeys: res.response,\n                error: null\n            });\n        })\n        .catch(() => {\n            this.setState({\n                error: \"A server error occured when generating a premium key\",\n                success: null\n            });\n        });\n    }\n\n    revokeKey() {\n        fetch(`${process.env.REACT_APP_API}/admin/revoke-premium-key`, {\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            credentials: \"include\",\n            method: \"POST\",\n            body: JSON.stringify({\n                keyToRevoke: this.state.keyToRevoke\n            })\n        })\n        .then(res => res.json())\n        .then(res => {\n            if (res.error) return this.setState({\n                error: res.response,\n                success: null\n            });\n\n            return this.setState({\n                success: \"Revoked premium key successfully.\",\n                error: null\n            });\n        })\n        .catch(() => {\n            this.setState({\n                error: \"A server error occured when revoking a premium key\",\n                success: null\n            });\n        });\n    }\n\n    stressTest() {\n        fetch(`${process.env.REACT_APP_API}/stress-test/${this.state.stressTestGuild}`, {\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            credentials: \"include\"\n        })\n        .then(res => res.json())\n        .then(res => {\n            if (res.error) return this.setState({\n                error: res.response,\n                success: null\n            });\n\n            return this.setState({\n                success: \"Stress test started\",\n                error: null\n            });\n        })\n        .catch(() => {\n            this.setState({\n                error: \"A server error occured when revoking a premium key\",\n                success: null\n            });\n        });\n    }\n\n    revokePremium() {\n        fetch(`${process.env.REACT_APP_API}/admin/revoke-premium-user`, {\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            credentials: \"include\",\n            method: \"POST\",\n            body: JSON.stringify({\n                user: this.state.user\n            })\n        })\n        .then(res => res.json())\n        .then(res => {\n            if (res.error) return this.setState({\n                error: res.response,\n                success: null\n            });\n\n            this.loadData();\n            return this.setState({\n                success: res.response,\n                error: null\n            });\n        })\n        .catch(() => {\n            this.setState({\n                error: \"A server error occured when revoking a premium user\",\n                success: null\n            });\n        });\n    }\n\n    addPremiumUser() {\n        fetch(`${process.env.REACT_APP_API}/admin/add-premium-user`, {\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            credentials: \"include\",\n            method: \"POST\",\n            body: JSON.stringify({\n                premiumAddUser: this.state.premiumAddUser\n            })\n        })\n        .then(res => res.json())\n        .then(res => {\n            if (res.error) return this.setState({\n                error: res.response,\n                success: null\n            });\n\n            this.loadData();\n            return this.setState({\n                success: res.response,\n                error: null\n            });\n        })\n        .catch(() => {\n            this.setState({\n                error: \"A server error occured when adding a premium user\",\n                success: null\n            });\n        });\n    }\n\n    purgeKeys() {\n        fetch(`${process.env.REACT_APP_API}/admin/purge-premium-keys`, {\n            credentials: \"include\",\n            method: \"POST\"\n        })\n        .then(res => res.json())\n        .then(res => {\n            if (res.error) return this.setState({\n                error: res.response,\n                success: null\n            });\n\n            return this.setState({\n                success: `Successfully purged ${res.response} keys`,\n                error: null\n            });\n        })\n        .catch(() => {\n            this.setState({\n                error: \"A server error occured when purging premium keys\",\n                success: null\n            });\n        });\n    }\n\n    denyMigration(oldId, newId) {\n        fetch(`${process.env.REACT_APP_API}/admin/migration-request/deny`, {\n            credentials: \"include\",\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                oldId,\n                newId\n            })\n        })\n        .then(res => res.json())\n        .then(res => {\n            if (res.error) return this.setState({\n                error: res.response,\n                success: null\n            });\n\n            return this.setState({\n                success: res.response,\n                error: null,\n                disabled: this.state.disabled.concat([oldId])\n            });\n        })\n        .catch(() => {\n            this.setState({\n                error: \"A server error occured when denying a migration request\",\n                success: null\n            });\n        });\n    }\n\n    approveMigration(oldId, newId) {\n        fetch(`${process.env.REACT_APP_API}/admin/migration-request/approve`, {\n            credentials: \"include\",\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                oldId: oldId,\n                newId: newId\n            })\n        })\n        .then(res => res.json())\n        .then(res => {\n            if (res.error) return this.setState({\n                error: res.response,\n                success: null\n            });\n\n            return this.setState({\n                success: res.response,\n                error: null,\n                disabled: this.state.disabled.concat([oldId])\n            });\n        })\n        .catch(() => {\n            this.setState({\n                error: \"A server error occured when approving a migration request\",\n                success: null\n            });\n        });\n    }\n\n    handleInput(event) {\n        this.setState({\n            [event.target.id]: event.target.value\n        });\n    }\n    \n    render() {\n        if (!this.props.user.admin) {\n            return(\n                <Alert variant=\"warning\">\n                    <strong>You are not an admin.</strong>\n                </Alert>\n            );\n        } else if (this.state.loading || !this.state.data) {\n            return(\n                <h1><strong>Loading...</strong></h1>\n            );\n        } else {\n            return(\n                <React.Fragment>\n                    {this.state.error &&\n                        <Alert variant={\"danger\"}>\n                            {this.state.error}\n                        </Alert>\n                    }\n                    {this.state.success &&\n                        <Alert variant={\"success\"}>\n                            {this.state.success}\n                        </Alert>\n                    }\n                    {this.state.newKeys &&\n                        <Alert variant={\"info\"}>\n                            <strong>{this.state.keysToGenerate} keys have been generated:</strong>\n                            <br />\n                            {this.state.newKeys.map(key => {\n                                return(\n                                    <p>{key}</p>\n                                );\n                            })}\n                        </Alert>\n                    }\n\n                    <h1><strong>Admin Area</strong></h1>\n\n                    <Card className={\"dark\"}>\n                        <Card.Header>\n                            <h3><strong>Statistics</strong></h3>\n                        </Card.Header>\n\n                        <Card.Body>\n                            <h5><strong>Guild Count: </strong><i>{this.state.data.guildCount}</i></h5>\n                            <h5><strong>User Count: </strong><i>{this.state.data.userCount}</i></h5>\n                        </Card.Body>\n                    </Card>\n\n                    <br />\n\n                    <Card className={\"dark\"}>\n                        <Card.Header>\n                            <h3><strong>Stress Testing</strong></h3>\n                        </Card.Header>\n\n                        <Card.Body>\n                            <p>Stress testing is used to test the rate limits from the Discord API and will pull every authorized user into a specific guild.</p>\n                            <Form.Control id=\"stressTestGuild\" placeholder={\"Provide a Guild ID\"} onChange={this.handleInput.bind(this)} value={this.state.stressTestGuild || \"\"} type={\"input\"} />\n                            <br />\n                            <Button variant={\"warning\"} onClick={this.stressTest.bind(this)} block>Stress Test!</Button>\n                        </Card.Body>\n                    </Card>\n\n                    <br />\n\n                    <Card className={\"dark\"}>\n                        <Card.Header>\n                            <h3><strong>Premium Key Management</strong></h3>\n                        </Card.Header>\n\n                        <Card.Body>\n                            <h5><strong>Generator</strong></h5>\n                            <Form.Control id=\"keysToGenerate\" placeholder={\"Number of keys to generate\"} onChange={this.handleInput.bind(this)} value={this.state.keysToGenerate || \"\"} type={\"input\"} />\n                            <br />\n                            <Button variant={\"light\"} onClick={this.generateKey.bind(this)} block>Generate Premium Keys</Button>\n                        \n                            <hr />\n\n                            <h5><strong>Revoking</strong></h5>\n                            <Form.Control id=\"keyToRevoke\" placeholder={\"Premium key to revoke\"} onChange={this.handleInput.bind(this)} value={this.state.keyToRevoke || \"\"} type={\"input\"} />\n                            <br />\n                            <Button variant={\"danger\"} onClick={this.revokeKey.bind(this)} block>Revoke Premium Key</Button>\n                        \n                            <hr />\n\n                            <Button variant={\"danger\"} onClick={this.purgeKeys.bind(this)} block>Purge Unused Keys</Button>\n                        </Card.Body>\n                    </Card>\n\n                    <br />\n\n                    <Card className={\"dark\"}>\n                        <Card.Header>\n                            <h3><strong>Premium Management</strong></h3>\n                        </Card.Header>\n\n                        <Card.Body>\n                            <h5><strong>Granting</strong></h5>\n                            <Form.Control id=\"premiumAddUser\" placeholder={\"A discord user ID\"} onChange={this.handleInput.bind(this)} value={this.state.premiumAddUser || \"\"} type={\"input\"} />\n                            <br />\n                            <Button onClick={this.addPremiumUser.bind(this)} variant={\"light\"} block>Grant Premium To User</Button>\n\n                            <hr />\n\n                            <h5><strong>Revoking</strong></h5>\n                            <Form.Control id=\"user\" placeholder={\"A discord user ID\"} onChange={this.handleInput.bind(this)} value={this.state.user || \"\"} type={\"input\"} />\n                            <br />\n                            <Button variant={\"danger\"} onClick={this.revokePremium.bind(this)} block>Revoke Premium Access</Button>\n\n                            <hr />\n\n                            <h5><strong>Activated Premium Users</strong></h5>\n                            <p>See a list of the premium activated users.</p>\n                        \n                            <hr />\n\n                            <Table className={\"table-dark\"} variant={\"dark\"} borderless hover>\n                                <thead>\n                                    <tr>\n                                        <th>User ID</th>\n                                        <th>User Tag</th>\n                                    </tr>\n                                </thead>\n\n                                <tbody>\n                                    {this.state.data.premiumUsers.slice(0, this.state.visibleUsers).map(user => {\n                                        return(\n                                            <React.Fragment>\n                                                <tr>\n                                                    <td>{user.id}</td>\n                                                    <td>{user.tag}</td>\n                                                </tr>\n                                            </React.Fragment>\n                                        );\n                                    })}\n                                </tbody>\n                            </Table>\n\n                            {this.state.data.premiumUsers.length > this.state.visibleUsers &&\n                                <Button variant={\"light\"} onClick={this.loadMore.bind(this)} block>Load More...</Button>\n                            }\n                        </Card.Body>\n                    </Card>\n\n                    <br />\n\n                    <Card className={\"dark\"}>\n                        <Card.Header>\n                            <h3><strong>Migration Requests</strong></h3>\n                        </Card.Header>\n\n                        <Card.Body>\n                            <p>See migration requests below and decide accordingly whether to approve or deny.</p>\n                        \n                            <hr />\n\n                            <Table className={\"table-dark\"} variant={\"dark\"} borderless hover>\n                                <thead>\n                                    <tr>\n                                        <th>Old User</th>\n                                        <th>New User</th>\n                                        <th>Actions</th>\n                                    </tr>\n                                </thead>\n\n                                <tbody>\n                                    {this.state.data.migrations.map(migration => {\n                                        return(\n                                            <React.Fragment>\n                                                <tr>\n                                                    <td>{`${migration.oldTag} (${migration.oldId})`}</td>\n                                                    <td>{`${migration.newTag} (${migration.newId})`}</td>\n                                                    <td>\n                                                        <Button onClick={this.approveMigration.bind(this, migration.oldId, migration.newId)} disabled={this.state.disabled.includes(migration.oldId)} size={\"sm\"} variant={\"success\"}>Approve</Button>{\" \"}\n                                                        <Button onClick={this.denyMigration.bind(this, migration.oldId, migration.newId)} disabled={this.state.disabled.includes(migration.oldId)} size={\"sm\"} variant={\"danger\"}>Deny</Button>\n                                                    </td>\n                                                </tr>\n                                            </React.Fragment>\n                                        );\n                                    })}\n                                </tbody>\n                            </Table>\n                        </Card.Body>\n                    </Card>\n\n                    <br />\n                </React.Fragment>\n            );\n        }\n    }\n}","import React, { Component } from \"react\";\nimport { Card, Image, Col, Button } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\n\nexport default class Server extends Component {\n    render() {\n        return(\n            <React.Fragment>\n                <Col>\n                    <Card className={\"dark center\"}>\n                        <Card.Header>\n                            <h6><strong>{this.props.guild.name}</strong></h6>\n                        </Card.Header>\n\n                        <Card.Body>\n                            <Image width={75} height={75} alt={`Icon of ${this.props.guild.name}`} src={this.props.guild.icon ? `https://cdn.discordapp.com/icons/${this.props.guild.id}/${this.props.guild.icon}.png` : \"https://cdn.discordapp.com/embed/avatars/0.png\"} />\n                        </Card.Body>\n\n                        <Card.Footer>\n                            <Button variant={\"light\"} as={Link} to={`/${this.props.guild.id}/manage`} block>Manage</Button>\n                        </Card.Footer>\n                    </Card>\n\n                    <br />\n                </Col>\n            </React.Fragment>\n        );\n    }\n}","import React, { Component } from \"react\";\nimport { Button } from \"react-bootstrap\";\n\nexport default class LoggedOut extends Component {\n    render() {\n        return(\n            <React.Fragment>\n                <div className=\"center\">\n                    <h1><strong>Page Requires Login</strong></h1>\n                    <p>This page requires you to be logged in with Discord.</p>\n\n                    <hr />\n\n                    <Button onClick={() => window.location.replace(`${process.env.REACT_APP_API}/oauth/login`)} variant={\"success\"}>Login with Discord</Button>\n                </div>\n            </React.Fragment>\n        );\n    }\n}","import React, { Component } from \"react\";\nimport { Alert, Row, Card, Form, Button } from \"react-bootstrap\";\nimport fetch from \"node-fetch\";\n\nimport Server from \"./Server\";\nimport LoggedOut from \"../global/LoggedOut\";\n\nexport default class ServerSelection extends Component {\n    constructor(props) {\n        super(props);\n \n        this.state = {\n            error: null,\n            success: null,\n            disabled: false,\n            oldId: null\n        }\n \n        this.migrate = this.migrate.bind(this);\n    }\n\n    migrate() {\n        this.setState({ disabled: true });\n\n        fetch(`${process.env.REACT_APP_API}/restore/${this.state.oldId}/migrate`, {\n            credentials: \"include\"\n        })\n        .then(res => res.json())\n        .then(res => {\n            if (res.error) return this.setState({\n                error: res.response,\n                success: null,\n                disabled: false\n            });\n \n            return this.setState({\n                success: res.response,\n                error: null\n            });\n        })\n        .catch(() => {\n            this.setState({\n                success: null,\n                disabled: false,\n                error: \"An unknown server error occured when sending migration request\"\n            });\n        });\n    }\n\n    handleInput(event) {\n        this.setState({\n            [event.target.id]: event.target.value\n        });\n    } \n\n    render() {\n        if (!this.props.user) {\n            return(<LoggedOut />);\n        } else {\n            return(\n                <React.Fragment>\n                    <Card className={\"dark\"}>\n                        <Card.Header>\n                            <h3><strong>User Migration Request</strong></h3>\n                        </Card.Header>\n                        <Card.Body>\n                            {this.state.error &&\n                                <Alert variant={\"danger\"}>\n                                    <strong>{this.state.error}</strong>\n                                </Alert>\n                            }\n\n                            {this.state.success &&\n                                <Alert variant={\"success\"}>\n                                    <strong>{this.state.success}</strong>\n                                </Alert>\n                            }\n\n                            <p>You can submit a user migration request (this is useful if you have moved to a new account on Discord and want to transfer your existing linked users).</p>\n                            <Form.Control id=\"oldId\" value={this.state.oldId || \"\"} placeholder={\"Enter your old user ID here\"} onChange={this.handleInput.bind(this)} />\n                        </Card.Body>\n                        <Card.Footer>\n                            <Button disabled={this.state.disabled} variant={\"light\"} onClick={this.migrate} block>Send Migration Request</Button>\n                        </Card.Footer>\n                    </Card>\n\n                    <hr />\n\n                    <h1><strong>Server Selection</strong></h1>\n\n                    <br />\n\n                    <h3><strong>Servers You Own</strong></h3>\n\n                    {!this.props.user.guilds.filter(g => g.owner).length &&\n                        <Alert variant={\"info\"}>\n                            You do not own any servers\n                        </Alert>\n                    }\n\n                    <Row lg={4} md={3} sm={2} xs={1}>\n                        {this.props.user.guilds.filter(g => g.owner).length ? this.props.user.guilds.filter(g => g.owner).map(guild => {\n                            return(\n                                <Server key={guild.id} guild={guild} />\n                            );\n                        }) : \"\"}\n                    </Row>\n\n                    <hr />\n\n                    <h3><strong>Servers You Are Administrator In</strong></h3>\n\n                    {!this.props.user.guilds.filter(g => !g.owner).length &&\n                        <Alert variant={\"info\"}>\n                            You are not administrator in any servers\n                        </Alert>\n                    }\n\n                    <Row lg={4} md={3} sm={2} xs={1}>\n                        {this.props.user.guilds.filter(g => !g.owner).length ? this.props.user.guilds.filter(g => !g.owner).map(guild => {\n                            return(\n                                <Server key={guild.id} guild={guild} />\n                            );\n                        }) : \"\"}\n                    </Row>\n                </React.Fragment>\n            );\n        }\n    }\n}","import React, { Component } from \"react\";\nimport fetch from \"node-fetch\";\nimport { Alert, Card, Form, Button, Image, Table } from \"react-bootstrap\";\nimport LoggedOut from \"../global/LoggedOut\";\n \nexport default class ManageServer extends Component {\n    constructor(props) {\n        super(props);\n  \n        this.state = {\n            loading: true,\n            guild: null,\n            error: null,\n            success: null,\n            prefix: null,\n            verifiedRole: null,\n            logsChannel: null,\n            welcomeMessage: null,\n            warning: null,\n            pullDisabled: false,\n            restoreDisabled: false,\n            allowAdmin: true,\n            visibleUsers: 10,\n            pullSuccess: null,\n            pullError: null\n        }\n \n        this.updateSettings = this.updateSettings.bind(this);\n        this.pullUser = this.pullUser.bind(this);\n    }\n\n    loadMore() {\n        this.setState({ visibleUsers: this.state.visibleUsers + 10 });\n    }\n\n    loadData() {\n        fetch(`${process.env.REACT_APP_API}/${this.props.match.params.id}/load`, {\n            credentials: \"include\"\n        })\n        .then(res => res.json())\n        .then(res => {\n            if (res.error) return this.setState({\n                loading: false,\n                warning: res.response\n            });\n \n            return this.setState({\n                loading: false,\n                guild: res.response,\n                prefix: res.response.prefix,\n                verifiedRole: res.response.verifiedRole,\n                logsChannel: res.response.logsChannel,\n                allowAdmin: res.response.allowAdmin,\n                welcomeMessage: res.response.welcomeMessage\n            });\n        })\n        .catch(() => {\n            this.setState({\n                loading: true,\n                guild: null\n            });\n        });\n    }\n \n    handleCheckbox(event) {\n        this.setState({\n            allowAdmin: !this.state.allowAdmin\n        });\n    }\n \n    handleInput(event) {\n        this.setState({\n            [event.target.id]: event.target.value\n        });\n    } \n \n    handleSelect(event) {\n        this.setState({\n            [event.target.id]: event.target.options[event.target.selectedIndex].id\n        });\n    }\n \n    componentDidMount() {\n        this.loadData();\n    }\n \n    pullUsers() {\n        this.setState({ pullDisabled: true });\n        fetch(`${process.env.REACT_APP_API}/restore/${this.state.guild.id}/pull`, {\n            credentials: \"include\"\n        })\n        .then(res => res.json())\n        .then(res => {\n            if (res.error) return this.setState({\n                pullError: res.response,\n                pullDisabled: false,\n                pullSuccess: null\n            });\n \n            this.loadData();\n            return this.setState({\n                pullSuccess: `Successfully pulled ${res.response} members into the server`,\n                pullError: null\n            });\n        })\n        .catch(() => {\n            this.setState({\n                pullSuccess: null,\n                pullDisabled: false,\n                pullError: \"An unknown server error occured when pulling members\"\n            });\n        });\n    }\n\n    pullUser(userId) {\n        fetch(`${process.env.REACT_APP_API}/restore/${this.state.guild.id}/pull/${userId}`, {\n            credentials: \"include\"\n        })\n        .then(res => res.json())\n        .then(res => {\n            if (res.error) return this.setState({\n                pullError: res.response,\n                pullSuccess: null\n            });\n \n            this.loadData();\n            return this.setState({\n                pullSuccess: \"User pulled successfully\",\n                pullError: null\n            });\n        })\n        .catch(() => {\n            this.setState({\n                success: null,\n                error: \"An unknown server error occured when pulling a member\"\n            });\n        });\n    }\n \n    backupServer() {\n        fetch(`${process.env.REACT_APP_API}/${this.state.guild.id}/backup`, {\n            method: \"POST\",\n            credentials: \"include\"\n        })\n        .then(res => res.json())\n        .then(res => {\n            if (res.error) return this.setState({\n                error: res.response,\n                success: null\n            });\n \n            return this.setState({\n                success: \"Server roles and channels backed up successfully\",\n                error: null\n            });\n        })\n        .catch(() => {\n            this.setState({\n                success: null,\n                error: \"An unknown server error occured when performing a server backup\"\n            });\n        });\n    }\n \n    restoreServer() {\n        fetch(`${process.env.REACT_APP_API}/${this.state.guild.id}/backup-restore`, {\n            method: \"POST\",\n            credentials: \"include\"\n        })\n        .then(res => res.json())\n        .then(res => {\n            if (res.error) return this.setState({\n                error: res.response,\n                success: null\n            });\n \n            return this.setState({\n                success: \"Server roles and channels restored successfully\",\n                error: null,\n                restoreDisabled: true\n            });\n        })\n        .catch(() => {\n            this.setState({\n                success: null,\n                error: \"An unknown server error occured when performing a server backup restore\"\n            });\n        });\n    }\n \n    updateSettings() {\n        fetch(`${process.env.REACT_APP_API}/${this.state.guild.id}/manage`, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                prefix: this.state.prefix,\n                verifiedRole: this.state.verifiedRole,\n                logsChannel: this.state.logsChannel,\n                allowAdmin: this.state.allowAdmin,\n                welcomeMessage: this.state.welcomeMessage\n            }),\n            credentials: \"include\"\n        })\n        .then(res => res.json())\n        .then(res => {\n            if (res.error) return this.setState({\n                success: null,\n                error: res.response\n            });\n \n            return this.setState({\n                success: \"Updated server settings successfully!\",\n                error: null\n            });\n        })\n        .catch(() => {\n            this.setState({\n                success: null,\n                error: \"An unknown server error occured when updating settings\"\n            });\n        });\n    }\n \n    render() {\n        if (!this.props.user) {\n            return(<LoggedOut />);\n        } else if (this.state.loading) {\n            return(<h1><strong>Loading...</strong></h1>);\n        } else if (this.state.warning) {\n            return(\n                <React.Fragment>\n                    <Alert variant={\"warning\"}>\n                        {this.state.warning}\n                    </Alert>\n \n                    <p><strong>Invite the bot to your server today!</strong></p>\n                    <Button onClick={() => window.open(`https://discord.com/oauth2/authorize?client_id=${process.env.REACT_APP_BOT_ID}&permissions=8&scope=bot&redirect_uri=${encodeURIComponent(process.env.REACT_APP_URL)}&response_type=code`)} variant={\"success\"} block>Invite Me</Button>\n                </React.Fragment>\n            );\n        } else {\n            return(\n                <React.Fragment>\n                    <Card className={\"dark center\"}>\n                        <Card.Header>\n                            <h1><strong>{this.state.guild.name}</strong></h1>\n                            <h5><strong>Member Count: </strong><i>{this.state.guild.memberCount}</i></h5>\n                        </Card.Header>\n                        <Card.Body>\n                            <Image src={this.state.guild.icon || \"https://cdn.discordapp.com/embed/avatars/0.png\"} width={100} height={100} alt={`Icon of ${this.state.guild.name}`} roundedCircle />\n                        </Card.Body>\n                    </Card>\n \n                    <br />\n \n                    <Card className={\"dark\"}>\n                        <Card.Header>\n                            <h3><strong>Server Configuration</strong></h3>\n                        </Card.Header>\n                        <Card.Body>\n                            {this.state.error &&\n                                <Alert variant={\"danger\"}>\n                                    {this.state.error}\n                                </Alert>\n                            }\n                            {this.state.success &&\n                                <Alert variant={\"success\"}>\n                                    {this.state.success}\n                                </Alert>\n                            }\n \n                            {this.state.guild.owner &&\n                                <Form.Check\n                                    type=\"checkbox\"\n                                    id=\"allowAdmin\"\n                                    onChange={this.handleCheckbox.bind(this)}\n                                    label=\"Allow members with ADMINISTRATOR permissions to manage this server\"\n                                    checked={this.state.allowAdmin}\n                                    custom\n                                />\n                            }\n \n                            <Form.Label>Prefix:</Form.Label>\n                            <Form.Control onChange={this.handleInput.bind(this)} id=\"prefix\" value={this.state.prefix || \"\"} />\n\n                            <Form.Label>Welcome Message:</Form.Label>\n                            <Form.Control onChange={this.handleInput.bind(this)} id=\"welcomeMessage\" value={this.state.welcomeMessage || \"\"} />\n                            <Form.Text className={\"text-muted\"}>This is a premium user feature.</Form.Text>\n\n                            <Form.Label>Verified Role:</Form.Label>\n                            <Form.Control onChange={this.handleSelect.bind(this)} id=\"verifiedRole\" as={\"select\"}>\n                                {this.state.guild.roles.map(role => {\n                                    return(\n                                        <option key={role.id} id={role.id} selected={role.id === this.state.verifiedRole}>@{role.name}</option>\n                                    );\n                                })}\n                            </Form.Control>\n \n                            <Form.Label>Logs Channel:</Form.Label>\n                            <Form.Control onChange={this.handleSelect.bind(this)} id=\"logsChannel\" as={\"select\"}>\n                                {this.state.guild.channels.map(channel => {\n                                    return(\n                                        <option key={channel.id} id={channel.id} selected={channel.id === this.state.logsChannel}>#{channel.name}</option>\n                                    );\n                                })}\n                            </Form.Control>\n                        </Card.Body>\n                        <Card.Footer>\n                            <Button onClick={this.updateSettings} variant={\"light\"} block>Update</Button>\n                            <Button variant={\"primary\"} onClick={this.backupServer.bind(this)} block>Backup Server Channels & Roles</Button>\n                            <Button variant={\"primary\"} onClick={this.restoreServer.bind(this)} disabled={this.state.restoreDisabled} block>Restore Latest Backup</Button>\n                            <p><strong>NOTE: </strong>Restoring a server backup will delete all your existing roles and channels; proceed with caution!</p>\n                        </Card.Footer>\n                    </Card>\n\n                    <br />\n\n                    {this.state.verifiedRole &&\n                        <React.Fragment>\n                            <Card className={\"dark\"}>\n                                <Card.Header>\n                                    <h3><strong>Member Pulling</strong></h3>\n                                </Card.Header>\n                                <Card.Body>\n                                    {this.state.pullError &&\n                                        <Alert variant={\"danger\"}>\n                                            {this.state.pullError}\n                                        </Alert>\n                                    }\n                                    {this.state.pullSuccess &&\n                                        <Alert variant={\"success\"}>\n                                            {this.state.pullSuccess}\n                                        </Alert>\n                                    }\n\n                                    <Button variant={\"warning\"} disabled={this.state.pullDisabled} onClick={this.pullUsers.bind(this)} block>Pull All Users</Button>\n                                    <Form.Text className=\"text-muted\">The restore process may take a while depending on how many authorized members you have...</Form.Text>\n\n                                    <hr />\n\n                                    <Table className={\"table-dark\"} variant={\"dark\"} borderless hover>\n                                        <thead>\n                                            <tr>\n                                                <th>User ID</th>\n                                                <th>User Tag</th>\n                                                <th>Actions</th>\n                                            </tr>\n                                        </thead>\n\n                                        <tbody>\n                                            {this.state.guild.linkedUsers.slice(0, this.state.visibleUsers).map(user => {\n                                                return(\n                                                    <React.Fragment>\n                                                        <tr>\n                                                            <td>{user.id}</td>\n                                                            <td>{user.tag}</td>\n                                                            <td>\n                                                                <Button onClick={this.pullUser.bind(this, user.id)} variant={\"light\"} disabled={user.inServer}>Pull</Button>\n                                                            </td>\n                                                        </tr>\n                                                    </React.Fragment>\n                                                );\n                                            })}\n                                        </tbody>\n                                    </Table>\n\n                                    {this.state.guild.linkedUsers.length > this.state.visibleUsers &&\n                                        <Button variant={\"light\"} onClick={this.loadMore.bind(this)} block>Load More...</Button>\n                                    }\n                                </Card.Body>\n                            </Card>\n                        </React.Fragment>\n                    }\n\n                    <br />\n                </React.Fragment>\n            );\n        }\n    }\n}","import React, { Component } from \"react\";\nimport { Card, Image, Alert, Button, Form } from \"react-bootstrap\";\nimport fetch from \"node-fetch\";\nimport LoggedOut from \"../global/LoggedOut\";\n\nexport default class RestoreView extends Component {\n    constructor(props) {\n        super(props);\n  \n        this.state = {\n            loading: true,\n            user: null,\n            error: null,\n            warning: null,\n            success: null,\n            disabled: false,\n            redirectUri: null\n        }\n \n        this.saveData = this.saveData.bind(this);\n    }\n\n    handleInput(event) {\n        this.setState({\n            [event.target.id]: event.target.value\n        });\n    } \n\n    unlink() {\n        fetch(`${process.env.REACT_APP_API}/restore/${this.state.user.id}/unlink`, {\n            credentials: \"include\"\n        })\n        .then(res => res.json())\n        .then(res => {\n            if (res.error) return this.setState({\n                error: res.response,\n                success: null\n            });\n\n            return this.setState({\n                error: null,\n                success: \"Successfully opted out from server force join\",\n                disabled: true\n            });\n        })\n        .catch(() => {\n            this.setState({\n                error: \"An unknown server error occured when unlinking\"\n            });\n        })\n    }\n    \n    register() {\n        fetch(`${process.env.REACT_APP_API}/restore/${this.state.user.id}/register`, {\n            credentials: \"include\"\n        })\n        .then(res => res.json())\n        .then(res => {\n            if (res.error) return this.setState({\n                error: res.response,\n                success: null\n            });\n\n            if (this.state.user.redirectUri) {\n                setTimeout(() => {\n                    window.location.replace(this.state.user.redirectUri);\n                }, 3000);\n            }\n\n            return this.setState({\n                error: null,\n                success: this.state.user.redirectUri ? \"Successfully opted in to server force join, redirecting...\" : \"Successfully opted in to server force join\",\n                disabled: true\n            });\n        })\n        .catch(() => {\n            this.setState({\n                error: \"An unknown server error occured when registering\"\n            });\n        })\n    }\n\n    saveData() {\n        fetch(`${process.env.REACT_APP_API}/restore/${this.state.user.id}/save-data`, {\n            credentials: \"include\",\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                redirectUri: this.state.redirectUri\n            })\n        })\n        .then(res => res.json())\n        .then(res => {\n            if (res.error) return this.setState({\n                error: res.response,\n                success: null\n            });\n\n            if (this.state.user.redirectUri) {\n                setTimeout(() => {\n                    window.location.replace(this.state.user.redirectUri);\n                }, 3000);\n            }\n\n            return this.setState({\n                error: null,\n                success: \"Successfully saved your data\"\n            });\n        })\n        .catch(() => {\n            this.setState({\n                error: \"An unknown server error occured when saving data\"\n            });\n        })\n    }\n\n    componentDidMount() {\n        fetch(`${process.env.REACT_APP_API}/restore/${this.props.match.params.id}/load`, {\n            credentials: \"include\"\n        })\n        .then(res => res.json())\n        .then(res => {\n            if (res.error) return this.setState({\n                warning: res.response,\n                loading: false\n            });\n\n            return this.setState({\n                user: res.response,\n                loading: false\n            });\n        })\n        .catch(() => {\n            this.setState({\n                warning: \"An unknown server error occured when fetching a user\",\n                loading: false\n            });\n        });\n    }\n\n    render() {\n        if (!this.props.user) {\n            return(<LoggedOut />);\n        } else if (this.state.loading) {\n            return(<h1><strong>Loading...</strong></h1>);\n        } else if (this.state.warning) {\n            return(\n                <Alert variant={\"warning\"}>\n                    {this.state.warning}\n                </Alert>\n            );\n        } else {\n            return(\n                <React.Fragment>\n                    {this.state.error &&\n                        <Alert variant={\"danger\"}>\n                            {this.state.error}\n                        </Alert>\n                    }\n                    {this.state.success &&\n                        <Alert variant={\"success\"}>\n                            {this.state.success}\n                        </Alert>\n                    }\n\n                    {this.state.user.id === this.props.user.id &&\n                        <React.Fragment>\n                            <Card className={\"dark\"}>\n                                <Card.Header className={\"center\"}>\n                                    <h1><strong>Configuration</strong></h1>\n                                </Card.Header>\n\n                                <Card.Body>\n                                    <Form.Label>Redirect URL:</Form.Label>\n                                    <Form.Control placeholder={\"Enter a URL to redirect users to after verification\"} onChange={this.handleInput.bind(this)} id=\"redirectUri\" value={this.state.redirectUri || \"\"} />\n\n                                    <br />\n\n                                    <Button onClick={this.saveData} variant={\"light\"} block>Save Changes</Button>\n                                </Card.Body>\n                            </Card>\n\n                            <br />\n                        </React.Fragment>\n                    }\n\n                    <Card className={\"dark center\"}>\n                        <Card.Header>\n                            <h1><strong>{this.state.user.username}</strong>#<i>{this.state.user.discriminator}</i></h1>\n                        </Card.Header>\n                        <Card.Body>\n                            <Image src={this.state.user.avatar} width={100} height={100} alt={`Avatar of ${this.state.user.username}`} roundedCircle />\n                            <br />\n                            {!this.state.user.linked &&\n                                <p><strong>Notice:</strong> By clicking the below button, you are agreeing that the above user can force you to join any server whenever they wish.</p>\n                            }\n                        </Card.Body>\n                        <Card.Footer>\n                            {!this.state.user.linked &&\n                                <Button variant={\"light\"} onClick={this.register.bind(this)} disabled={this.state.disabled} block>I agree to the above statement</Button>\n                            }\n                            {this.state.user.linked &&\n                                <Button variant={\"light\"} onClick={this.unlink.bind(this)} disabled={this.state.disabled} block>Unlink my account</Button>\n                            }\n                        </Card.Footer>\n                    </Card>\n                </React.Fragment>\n            );\n        }\n    }\n}","import React, { Component } from \"react\";\nimport { Form, Card, Alert, Button } from \"react-bootstrap\";\nimport fetch from \"node-fetch\";\n\nexport default class PremiumActivation extends Component {\n    state = {\n        key: null,\n        error: null,\n        success: false\n    }\n\n    handleInput(event) {\n        this.setState({\n            [event.target.id]: event.target.value\n        });\n    }\n\n    activatePremium() {\n        fetch(`${process.env.REACT_APP_API}/admin/redeem-premium-key`, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                key: this.state.key\n            }),\n            credentials: \"include\"\n        })\n        .then(res => res.json())\n        .then(res => {\n            if (res.error) return this.setState({\n                error: res.response\n            });\n\n            this.setState({\n                error: null,\n                success: true\n            });\n\n            setTimeout(() => {\n                window.location.reload();\n            }, 3000);\n        })\n        .catch(() => {\n            this.setState({\n                error: \"A server error occured when trying to redeem a premium key\"\n            });\n        });\n    }\n\n    render() {\n        return(\n            <React.Fragment>\n                {this.state.error &&\n                    <Alert variant={\"danger\"}>\n                        {this.state.error}\n                    </Alert>\n                }\n                {this.state.success &&\n                    <Alert variant={\"success\"}>\n                        Premium license key was redeemed successfully! Refreshing...\n                    </Alert>\n                }\n\n                <Card className={\"dark\"}>\n                    <Card.Header>\n                        <h3><strong>Premium Activation</strong></h3>\n                    </Card.Header>\n\n                    <Card.Body>\n                        <p>To access this bots premium features, you require a premium activation key - please enter your premium key in the textbox below to activate your license.</p>\n\n                        <Form.Control id=\"key\" value={this.state.key || \"\"} onChange={this.handleInput.bind(this)} type={\"input\"} placeholder={\"Premium key here\"} />\n                        <br />\n                        <Button variant={\"light\"} onClick={this.activatePremium.bind(this)} block>Activate Premium</Button>\n\n                        <Button\n                            variant={\"success\"}\n                            block\n                            data-sellix-product=\"5fcf835cbfcf7\"\n                            type=\"submit\"\n                            alt=\"Buy Now with Sellix.io\"\n                            >\n                            Purchase Premium\n                        </Button>\n                    </Card.Body>\n                </Card>\n\n                <br />\n            </React.Fragment>\n        );\n    }\n}","import React, { Component } from \"react\";\nimport { Alert, Button } from \"react-bootstrap\";\nimport PremiumActivation from \"../servers/PremiumActivation\";\n\nexport default class Information extends Component {\n    render() {\n        return(\n            <React.Fragment>\n                {!this.props.user &&\n                    <Alert variant={\"info\"}>\n                        Login to purchase premium\n                    </Alert>\n                }\n                {this.props.user && !this.props.user.premium &&\n                    <React.Fragment>\n                        <Alert variant={\"info\"}>\n                            You are currently on a FREE subscription\n                        </Alert>\n\n                        <PremiumActivation />\n                    </React.Fragment>\n                }\n                {this.props.user && this.props.user.premium &&\n                    <Alert variant={\"info\"}>\n                        You are currently on a PREMIUM subscription\n                    </Alert>\n                }\n\n                <Button variant={\"success\"} onClick={() => window.open(\"https://discord.gg/VYfW2dQcKf\")} block>Join our Discord Support Server</Button>\n\n                <h1><strong>Information</strong></h1>\n                <p>Restore Bot is a discord bot aimed at recovery of discord servers, we have member linking and server backups.</p>\n\n                <h3><strong>Member Linking</strong></h3>\n                <p>Members of your server can sign into this dashboard with Discord OAuth2, visit a linking URL the bot provides and with a simple click of a button, the account is tied until the user chooses to deauthorize.</p>\n                <h6><strong>What's the benefits of this?</strong></h6>\n                <p>You can use a button on the admin panel labelled \"Pull Users\" in a fresh new server and it will force all authorized users to join the new server! Great, eh? This is a specially made member recovery system.</p>\n                <p>Alternatively, you can use the <code>%join</code> command in your server to pull authorized users.</p>\n\n                <h3><strong>Server Backups</strong></h3>\n                <p>You can create a backup in your server in case you ever lose any channels or roles. The backup system will backup roles with its permissions and channels.</p>\n                <h6><strong>What's the benefits of this?</strong></h6>\n                <p>With the click of a button, you can reinstate the server channels and roles back to how it was when you last did a backup. This is a role and channel recovery system.</p>\n                <p>Do note, messages and channel permissions are not backed up in this process. You will also lose all current / old channels when you restore a backup.</p>\n\n                <h3><strong>FAQ</strong></h3>\n                <p><strong>As a server owner, where can I find my authorization URL to provide to my members?</strong></p>\n                <p>If you have setup this bot correctly and newcomers have direct messages enabled, they will be sent the URL. However, in the event that this does not happen, your URL is simply this: <code>{process.env.REACT_APP_URL}/:id/register</code> - replace <code>:id</code> with your discord user ID.</p>\n                <p><strong>As a server owner, I used the Pull Members function and not all members were pulled, why?</strong></p>\n                <p>In this event, this would imply the member is either already in the server or their access token is invalid meaning they have deauthorized access to the application. Either that or they may have unlinked their account from you. Check your logs.</p>\n            \n                <br /><br />\n            </React.Fragment>\n        );\n    }\n}","import React, { Component } from \"react\";\nimport { Modal, Button } from \"react-bootstrap\";\n\nexport default class Footer extends Component {\n    state = {\n        modalActive: false\n    }\n\n    modalStatus() {\n        this.setState({\n            modalActive: !this.state.modalActive\n        });\n    }\n\n    render() {\n        return(\n            <React.Fragment>\n                <Modal size={\"lg\"} show={this.state.modalActive} onHide={this.modalStatus.bind(this)}>\n                    <Modal.Header className={\"modal-bg\"}>\n                        <h3><strong>Privacy Policy</strong></h3>\n                    </Modal.Header>\n\n                    <Modal.Body className={\"modal-bg\"}>\n                        <p>The terms \"us\", \"we\" and \"our\" represent Restore Bot Services (restorebot.services)</p>\n                        <p>The terms \"you\", \"your\" and \"you're\" represent you as a visitor or member of our website.</p>\n                        <p>This privacy policy can be updated at anytime with or without given notice, it is your responsibility to check this privacy policy for updates.</p>\n\n                        <h5><strong>What data is being stored and collected about you?</strong></h5>\n                        <p>We store your discord user ID, discord access token, discord refresh token and an array of discord user ID's who have authorized themselves with you.</p>\n                        <p>When you authorize yourself with another user, your discord user ID will be stored in an array linked to the user you're authorizing with.</p>\n                        <p>We collect the name, icon and owner of any servers you're in.</p>\n\n                        <h5><strong>Why do we collect and store this information?</strong></h5>\n                        <p>All the collected and stored information is all relevant to ensure the bot is functioning correctly along with this website.</p>\n\n                        <h5><strong>Do we share your information with third-parties?</strong></h5>\n                        <p>No, we do not share your information with other third-parties.</p>\n\n                        <h5><strong>Do you store any cookies in my browser?</strong></h5>\n                        <p>Yes, when you login with discord and authorize, an access_token and refresh_token cookie will be created to improve your experience.</p>\n                        <p>CloudFlare may store additional cookies.</p>\n\n                        <h5><strong>How do I request my data to be deleted?</strong></h5>\n                        <p>You will need to join our discord server and contact an administrator.</p>\n                    </Modal.Body>\n\n                    <Modal.Footer className={\"modal-bg\"}>\n                        <Button variant={\"light\"} size={\"sm\"} onClick={this.modalStatus.bind(this)}>Close</Button>\n                    </Modal.Footer>\n                </Modal>\n\n                <br />\n\n                <Button variant={\"light\"} size={\"sm\"} onClick={this.modalStatus.bind(this)}>Privacy Policy</Button>\n            \n                <br />\n                <br />\n            </React.Fragment>\n        );\n    }\n}","import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport fetch from \"node-fetch\";\nimport { Container } from \"react-bootstrap\";\n\nimport NavigationBar from \"./global/navigation/NavigationBar\";\nimport AdminArea from \"./admin/AdminArea\";\nimport ServerSelection from \"./servers/ServerSelection\";\nimport ManageServer from \"./servers/ManageServer\";\nimport RestoreView from \"./user/RestoreView\";\nimport Information from \"./information/Information\";\nimport Footer from \"./footer/Footer\";\n\nexport default class App extends Component {\n    state = {\n        loading: true,\n        user: null\n    }\n\n    componentDidMount() {\n        fetch(`${process.env.REACT_APP_API}/oauth/user`, {\n            credentials: \"include\"\n        })\n        .then(res => res.json())\n        .then(res => {\n            this.setState({\n                loading: false,\n                user: res\n            });\n        })\n        .catch(() => {\n            this.setState({\n                loading: true\n            });\n        });\n    }\n\n    render() {\n        if (this.state.loading) {\n            return(\n                <React.Fragment>\n                    <Container>\n                        <h1>Loading...</h1>\n                    </Container>\n                </React.Fragment>\n            );\n        } else {\n            return(\n                <Router>\n                   <NavigationBar user={this.state.user} />\n                    \n                    <Switch>\n                        <Container>\n                            <br />\n\n                            <Route exact path=\"/\" render={(props) => <Information {...props} user={this.state.user} /> } />\n                            <Route exact path=\"/admin\" render={(props) => <AdminArea {...props} user={this.state.user} /> } />\n                            <Route exact path=\"/servers\" render={(props) => <ServerSelection {...props} user={this.state.user} /> } />\n                            <Route exact path=\"/:id/manage\" render={(props) => <ManageServer {...props} user={this.state.user} /> } />\n                            <Route exact path=\"/:id/register\" render={(props) => <RestoreView {...props} user={this.state.user} /> } />\n\n                            <Footer />\n                        </Container>\n                    </Switch>\n                </Router>\n            );\n        }\n    }\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"./styles/custom.scss\";\nimport \"./styles/style.css\";\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();"],"sourceRoot":""}